name: kwctl release
on:
  push:
    tags:
    - 'v*'
env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build and run tests
    uses: ./.github/workflows/ci.yml

  release:
    name: Create release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    needs:
      - build
    steps:
      - name: Download all artifact
        id: download
        uses: actions/download-artifact@v2

      - name: Retrieve tag name
        run: |
          echo TAG_NAME=$(echo ${{ github.ref }} | sed -e "s|refs/tags/||") >> $GITHUB_ENV

      - name: Get release ID from the release created by release drafter
        uses: actions/github-script@v6
        with:
          script: |
            let releases = await github.rest.repos.listReleases({
               owner: context.repo.owner,
               repo: context.repo.repo,
            });
            for (const release of releases.data) {
              if (release.draft) {
                      core.info(`${release}`)
                      core.exportVariable('RELEASE_ID', release.id)
                      return
              }
            }
            core.setFailed(`Draft release not found`)

      - name: Upload release assets
        uses: actions/github-script@v6
        env:
          DOWNLOAD_PATH: "${{steps.download.outputs.download-path}}"
        with:
          script: |
            const {RELEASE_ID, DOWNLOAD_PATH} = process.env
            core.info(`${RELEASE_ID} - ${DOWNLOAD_PATH}`)
            let fs = require('fs');
            let path = require('path');
            const patterns = [
              `${DOWNLOAD_PATH}/kwctl-airgap-scripts/*`,
              `${DOWNLOAD_PATH}/kwctl-linux-*/*`,
              `${DOWNLOAD_PATH}/kwctl-darwin-*/*`,
              `${DOWNLOAD_PATH}/kwctl-windows-*/*`,
            ]
            let globber = await glob.create(patterns.join('\n'))
            let files =  await globber.glob()
            for (const file of files) {
              core.info(file)
              let file_data = fs.readFileSync(file);

              github.rest.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: `${RELEASE_ID}`,
                name: path.basename(file),
                data: file_data,
              });
            }

      # - name: Get previous release tag
      #   id: get_previous_release_tag
      #   uses: actions/github-script@v6
      #   with:
      #     script: |
      #       let release = await github.rest.repos.getLatestRelease({
      #          owner: context.repo.owner,
      #          repo: context.repo.repo,
      #       });

      #       if (release.status  === 200 ) {
      #         core.setOutput('old_release_tag', release.data.tag_name)
      #         return
      #       }
      #       core.setFailed("Cannot find latest release")

      - name: Publish release
        uses: actions/github-script@v6
        with:
          script: |
            const {RELEASE_ID} = process.env
            const {TAG_NAME} = process.env
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: `${RELEASE_ID}`,
              draft: false,
              tag_name: `${TAG_NAME}`,
              name: `${TAG_NAME}`
            });

      # - name: Trigger chart update
      #   uses: peter-evans/repository-dispatch@26b39ed245ab8f31526069329e112ab2fb224588 # v2.1.1
      #   with:
      #     token: ${{ secrets.WORKFLOW_PAT }}
      #     repository: "${{github.repository_owner}}/helm-charts"
      #     event-type: update-chart
      #     client-payload: '{"version": "${{ github.ref_name }}", "oldVersion": "${{ steps.get_previous_release_tag.outputs.old_release_tag }}", "repository": "${{ github.repository }}"}'
